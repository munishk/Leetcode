import java.util.ArrayList;
import java.util.List;

public class LargestDivisibleSubset {
	
	 List<Integer> res = new ArrayList<>();
	 long count = 0;
	    public List<Integer> largestDivisibleSubset(int[] nums) {
	        ldsUtil(nums, 0, new ArrayList<>());
	        return res;
	    }
	    
	    private List<Integer> ldsUtilDP(int[] nums) {
	    	//Arrays.sort(nums);
	    	int[] dp = new int[nums.length];
	    	int[] prev = new int[nums.length];
	    	for(int i=0; i<nums.length; i++) {
	    		dp[i] = 1;
	    		prev[i] = -1;
	    	}
	    	
	    	for(int i=1; i<nums.length; i++) {
	    		for(int j=i-1; j>=0; j--) {
	    			if(dp[j]+1 > dp[i] && satisfies(nums,prev, nums[i], j)) {
	    					dp[i] = dp[j] +1;
	    					prev[i] = j;
	    			}else if (dp[j]+1 == dp[i]) {
	    				print(nums, prev, i);
	    			}
	    		}
	    	}
	    	
	    	for(int val: dp) {
	    	   System.out.format("%3d ", val);
	        }
	    	System.out.println();
	    	
	    	for(int val: prev) {
		    	   System.out.format("%3d ", val);
		        }
		    	System.out.println();
	    	
	    	int maxIndex = -1;
	    	int max = Integer.MIN_VALUE;
	    	for(int i=0; i<nums.length; i++) {
	    		if( dp[i] > max) {
	    			max = dp[i];
	    			maxIndex = i;
	    		}
	    	}
	    	
	    	//construct list
	    	List<Integer> res = new ArrayList<>();
	    	if(maxIndex == -1) {
	    		return res;
	    	}
	    	res.add(nums[maxIndex]);
	    	int index = prev[maxIndex];
	    	while(index != -1) {
	    		res.add(nums[index]);
	    		index = prev[index];
	    	}
	    	return res;
	    }
	    
	    private void print(int[] nums, int[] prev, int index) {
	    	List<Integer> list = new ArrayList<>();
	    	list.add(nums[index]);
	    	int prevIndex = prev[index];
	    	while(prevIndex != -1) {
	    		list.add(nums[prevIndex]);
	    		prevIndex = prev[prevIndex];
	    	}
	    	System.out.println(list);
	    }
	    
	    private boolean satisfies(int[] nums, int[] prev, int currElement, int currIndex) {
	    	int index = currIndex;
	    	if(!satisfiesCondition(currElement, nums[index])) {
	    		return false;
	    	}
	    	index = prev[index];
	    	while(index != -1) {
	    	   if(!satisfiesCondition(currElement, nums[index])) {
		    		return false;
		    	}
	    	   index = prev[index];
	    	}
	    	return true;
	    }
	    
	    private boolean satisfiesCondition(int a, int b) {
	    	return a%b == 0 || b%a == 0;
	    }
	    
	    //Recursive approach - Complexity - 2^n
	    private void ldsUtil(int[] nums, int index, List<Integer> list) {
	    	count++;
	        if(index >= nums.length) {
	            return;
	        }
	        
	        if(canBeAdded(list, nums[index])) {
	            list.add(nums[index]);
	            if(list.size() > res.size()) {
	                res = new ArrayList<>(list);
	            }
	            ldsUtil(nums, index+1, list);
	            list.remove(list.size()-1);

	        }
	          
	        ldsUtil(nums, index+1, list);
	    }

	    private boolean canBeAdded(List<Integer> list, int num) {
	        for(Integer listItem: list) {
	            if(listItem%num != 0 && num%listItem != 0) {
	                return false;
	            }
	        }
	        return true;
	    }

	public static void main(String[] args) {
		LargestDivisibleSubset sol = new LargestDivisibleSubset();
		//int[] nums = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000};
		//int[] nums  = {472,105,328,922,963,625,827,232,913,832,730,152,697,614,570,639,459,895,70,488,239,596,930,402,904,197,911,126,876,535,597,332,863,870,646,839,878,751,528,959,929,679,7,543,248,353,494,67,841,732,662,122,485,565,318,747,42,545,282,638,228,496,860,874,334,556,103,437,83,61,365,761,259,361,64,612,206,131,452,938,144,573,774,243,521,102,787,154,92,15,649,951,240,506,342,770,940,135,700,820,393,412,884,356,618,366,807,907,861,380,32,921,622,23,760,57,466,416,391,273,706,512,212,998,263,279,743,27,514,98,996,231,905,902,91,636,285,364,609,189,738,368,203,846,6,970,210,748,594,268,157,726,257,419,999,797,869,96,792,451,352,693,894,987,978,595,518,346,315,114,900,160,119,721,218,814,988,477,66,733,740,421,537,642,178,882,21,337,868,350,945,815,219,290,129,684,640,155,409,712,372,222,848,765,932,283,14,819,544,146,425,958,644,903,458,473,85,627,845,641,340,198,961,456,992,495,413,170,390,559,143,166,428,100,809,647,354,619,435,250,837,533,530,883,948,816,432,261,623,560,503,406,916,147,826,277,312,253,729,251,434,443,686,683,944,186,829,898,63,457,405,417,811,579,957,404,532,621,8,260,445,45,887,296,728,236,591,447,422,696,481,893,264,974,701,714,379,12,482,541,942,385,849,345,469,705,527,571,799,962,650,387,552,97,808,971,242,803,36,505,777,89,507,52,47,436,703,716,794,229,628,108,800,779,69,449,165,973,897,324,943,689,917,745,76,873,164,616,9,24,237,739,892,818,718,351,617,420,744,314,687,956,782,781,297,424,737,912,522,272,408,369,645,275,611,840,382,125,890,162,568,295,349,301,997,38,908,179,333,439,899,329,65,159,142,121,923,247,854,802,330,335,43,843,254,137,954,515,790,950,566,857,490,822,519,286,150,583,796,291,941,37,742,723,784,976,374,780,888,569,879,805,88,468,463,969,258,877,176,564,654,798,789,793,401,493,557,592,202,418,115,852,462,953,717,338,480,981,396,634,836,681,629,935,553,540,397,665,758,817,224,821,158,968,323,17,3,776,177,81,906,749,344,169,140,926,118,501,927,504,598,875,34,643,548,813,470,508,736,602,378,59,652,994,915,249,213,661,450,39,267,586,55,727,25,113,141,734,972,872,300,516,526,270,112,555,171,766,256,127,10,316,554,194,448,657,847,174,241,620,68,562,426,133,265,491,909,989,168,173,167,928,41,567,986,724,658,208,699,709,306,933,2,653,881,298,750,577,702,319,694,394,601,651,309,16,310,668,486,192,136,33,856,134,563,370,358,498,593,230,484,308,851,235,51,551,536,980,415,810,246,307,79,221,580,576,101,438,791,455,673,75,610,376,44,624,399,294,271,195,725,637,78,773,806,967,163,871,389,453,558,925,193,467,274,371,788,599};
		int[] nums = {64,32,70,210, 2, 256};
		//System.out.println(nums.length);
		for(int i=0; i<nums.length; i++) {
			System.out.format("%3d ", i);
			}
		System.out.println();
		
		for(int val: nums) {
		System.out.format("%3d ", val);
		}
		System.out.println();
		System.out.println(sol.ldsUtilDP(nums));
		System.out.println(sol.largestDivisibleSubset(nums));
		//System.out.println(sol.count);
	}

}
